// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package chunking

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChunkInfo struct {
	// OpNum is the ID of the op, used to ensure values are applied to the
	// right operation
	OpNum uint64 `protobuf:"varint,1,opt,name=op_num,json=opNum,proto3" json:"op_num,omitempty"`
	// SequenceNum is the current number of the ops; when applying we should
	// see this start at zero and increment by one without skips
	SequenceNum uint32 `protobuf:"varint,2,opt,name=sequence_num,json=sequenceNum,proto3" json:"sequence_num,omitempty"`
	// NumChunks is used to check whether all chunks have been received and
	// reconstruction should be attempted
	NumChunks uint32 `protobuf:"varint,3,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks,omitempty"`
	// NextExtensions holds inner extensions information for the next layer
	// down of Apply
	NextExtensions       []byte   `protobuf:"bytes,4,opt,name=next_extensions,json=nextExtensions,proto3" json:"next_extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkInfo) Reset()         { *m = ChunkInfo{} }
func (m *ChunkInfo) String() string { return proto.CompactTextString(m) }
func (*ChunkInfo) ProtoMessage()    {}
func (*ChunkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}

func (m *ChunkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkInfo.Unmarshal(m, b)
}
func (m *ChunkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkInfo.Marshal(b, m, deterministic)
}
func (m *ChunkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkInfo.Merge(m, src)
}
func (m *ChunkInfo) XXX_Size() int {
	return xxx_messageInfo_ChunkInfo.Size(m)
}
func (m *ChunkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkInfo proto.InternalMessageInfo

func (m *ChunkInfo) GetOpNum() uint64 {
	if m != nil {
		return m.OpNum
	}
	return 0
}

func (m *ChunkInfo) GetSequenceNum() uint32 {
	if m != nil {
		return m.SequenceNum
	}
	return 0
}

func (m *ChunkInfo) GetNumChunks() uint32 {
	if m != nil {
		return m.NumChunks
	}
	return 0
}

func (m *ChunkInfo) GetNextExtensions() []byte {
	if m != nil {
		return m.NextExtensions
	}
	return nil
}

func init() {
	proto.RegisterType((*ChunkInfo)(nil), "github_com_hashicorp_go_raft_chunking.ChunkInfo")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x40, 0x89, 0xd6, 0x62, 0xa7, 0x55, 0x21, 0x20, 0xf4, 0x22, 0x54, 0x41, 0xec, 0xc9, 0x8b,
	0x7f, 0xa0, 0x78, 0xf0, 0xe2, 0xa1, 0xc7, 0xbd, 0x84, 0x36, 0xa4, 0x4d, 0x58, 0x32, 0x93, 0x6d,
	0x12, 0xe8, 0x7e, 0xc4, 0xfe, 0xf3, 0xd2, 0x2c, 0xdd, 0xe3, 0xbc, 0x79, 0x3c, 0x66, 0xa0, 0x0c,
	0x47, 0xa7, 0xfc, 0xa7, 0x9b, 0x29, 0x10, 0x7f, 0x9f, 0x4c, 0xd0, 0x71, 0x10, 0x92, 0xac, 0xd0,
	0xbd, 0xd7, 0x46, 0xd2, 0xec, 0xc4, 0x44, 0x62, 0xee, 0xc7, 0x20, 0xa4, 0x8e, 0xb8, 0x37, 0x38,
	0xbd, 0x9d, 0x18, 0x14, 0x3f, 0xeb, 0xf0, 0x87, 0x23, 0xf1, 0x67, 0xc8, 0xc9, 0x09, 0x8c, 0xb6,
	0x66, 0x0d, 0x6b, 0xb3, 0xee, 0x8e, 0xdc, 0x7f, 0xb4, 0xfc, 0x15, 0x2a, 0xaf, 0x0e, 0x51, 0xa1,
	0x54, 0x69, 0x79, 0xd3, 0xb0, 0xf6, 0xa1, 0x2b, 0x37, 0xb6, 0x2a, 0x2f, 0x00, 0x18, 0xed, 0xa5,
	0xeb, 0xeb, 0xdb, 0x24, 0x14, 0x18, 0x6d, 0x6a, 0x7b, 0xfe, 0x01, 0x4f, 0xa8, 0x96, 0x20, 0xd4,
	0x12, 0x14, 0x7a, 0x43, 0xe8, 0xeb, 0xac, 0x61, 0x6d, 0xd5, 0x3d, 0xae, 0xf8, 0xf7, 0x4a, 0xbf,
	0x61, 0x77, 0xbf, 0xdd, 0x36, 0xe4, 0xe9, 0x93, 0xaf, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11,
	0xcb, 0xcd, 0x59, 0xd8, 0x00, 0x00, 0x00,
}
